// Method - 1 Brute Using two for loops
// TC:  O(N^2)
// SC: O(N)
// vector<int> nge(n,-1);
// for each ith element search for next greater element using jth loop if next greater element found
// nge[i] = arr[j]






// Method-2 Optimal
class Solution {
public:
    // Method-2 Optimal
    vector<int> findNextGreaterElement(vector<int> &nums1 , vector<int> &nums2){
        vector<int> nge(nums2.size(),-1);
        stack<int> st;
        map<int,int> map;
        for(int i = 0 ; i < nums2.size() ; i++){
            while(!st.empty() && nums2[i] > nums2[st.top()]){
                nge[st.top()] = i;  // 0 ---> 1
                st.pop();
            }
            st.push(i);
        }
        for(int i = 0 ; i < nums2.size() ; i++){
            map[nums2[i]] = nge[i] != -1 ? nums2[nge[i]] : -1; 
        }
        vector<int> ans;
        for(int i = 0 ; i < nums1.size() ; i++){
            ans.push_back(map.find(nums1[i]) -> second);
        }
        return ans;
    }
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        return findNextGreaterElement(nums1, nums2);
    }
};





// Method-3 Optimized
class Solution {
public:
    // Method-3 Optimized
    vector<int> findNextGreaterElement(vector<int> &nums1 , vector<int> &nums2){
        vector<int> nge;
        map<int,int> map;
        stack<int> st;
        for(int i = nums2.size()-1 ; i >= 0 ; i--){
            int ele = nums2[i];
            while(!st.empty() && st.top() <= nums2[i]){
                st.pop();
            }
            // after pop smaller element 
            // top of the stack contains nge for incoming element
            int res = st.empty() ? -1 : st.top();
            map.insert({ele , res});
            st.push(nums2[i]);
        }
        // Now iterate the first array
        vector<int> ans;
        for(int i=0 ; i < nums1.size() ; i++){
            ans.push_back(map.find(nums1[i]) != map.end() ? map.find(nums1[i]) -> second : -1);
        }
        return ans;
    }
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        return findNextGreaterElement(nums1, nums2);
    }
};
