// Method - 1
class MinStack {
public:
    stack<pair<int,int>> st;
    void push(int val) {
        if(st.empty()){
            st.push(make_pair(val,val));
            return ;
        } 
        else{
            if(st.top().second < val){
                st.push(make_pair(val,st.top().second));
            }
            else{
                st.push(make_pair(val,val));
            }
        }
    }
    
    void pop() {
        if(!st.empty()) st.pop();
    }
    
    int top() {
        if(st.empty()) return -1;
        return st.top().first;
    }
    
    int getMin() {
        if(st.empty()) return -1;
        return st.top().second;
    }
};




// Method - 2
class MinStack {
public:
    // Method - 2 TC: O(N) SC: O(N)
    stack<long long> st;
    long long mini;

    MinStack(){
        mini = INT_MAX;
    }
    void push(int value) {
        long long val = value;
        if(st.empty()){
            mini = val;
            st.push(val);
        }
        else{
            if(val < mini){
                st.push(2 * val * 1LL - mini);
                mini = val;
            }
            else{
                st.push(val);
            }
        }
    }
    
    void pop() {
        if(st.empty()) return ;
        long long el = st.top();
        st.pop();
        // before pop check top is last/top less than minimum then it must be modified vale
        if(el < mini){          // this indicates that element to be popped is minimum
            // rollback mini to previous minimum value
            mini = (2 * mini) - el;
            // modified/dummy value from array is also need to removed 
        }
    }
    
    int top() {
        if(st.empty()) return -1;
        // if top is less than minimum then it must be modified vale
        long long el = st.top();
        // then top of the stack value stored inside minimum variable
        if(el < mini) return mini;
        return el;
    }
    
    int getMin() {
        return mini;
    }
};
