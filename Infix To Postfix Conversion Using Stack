
class Solution {
  public:
    int prec(char ch){
        if(ch == '^') return 3;
        else if(ch == '/' || ch == '*') return 2;
        else if(ch == '+' || ch == '-') return 1;
        else return -1;
    }
    string infixToPostfix(string s) {
        stack<int> st;
        string ans;
        for(int i = 0 ; i < s.size() ; i++){
            if(s[i] == '('){
                st.push(s[i]);
            }
            else if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')){
                ans += s[i];
            }
            else if(s[i] == ')'){
                while(!st.empty() && st.top() != '('){
                    ans += st.top();
                    st.pop();
                }
                if(!st.empty()) st.pop();   // popping the last opening bracket
            }
            else if(s[i] >= '0' && s[i] <= '9'){
                ans += s[i];
            }
            else{
                // if incoming element have less precedence than top of stack
                while(!st.empty() && prec(s[i]) <= prec(st.top())){
                    ans += st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
        }
        while(!st.empty()){
            ans += st.top();
            st.pop();
        }
        return ans;
    }
};
