// Method - 2 Optimal - 1 Using stack
class Solution {
public:
    // Method - 2 Optimal Using stack
    vector<int> findAsteroidCollision(vector<int> &arr) {
        stack<int> st;
        vector<int>ans;
        for(int i = 0 ; i < arr.size() ; i++) {
            // stack is empty than simply push element to stack
            // doesn't depend weather it is +ve or -ve 
            // incoming element moving towards right direction means +ve this will never cause an collision
            if(arr[i] > 0) st.push(arr[i]);
            // incoming element movind towargs left direction means -ve this may cause collision
            else{
                //size st.top is smaller than incoming element size[than pop top of stack smaller asteroid will X]
                while(!st.empty() && st.top() < abs(arr[i]) ) st.pop();
                // top size is equal to incoming element size [collision will occur and both elements will X]
                if(!st.empty() && st.top() == abs(arr[i]) ) st.pop();
                // //size st.top is greater than incoming element size[than st.top wins and incoming element will X] 
                // // so no further things are required as winner is already present inside stack
                // else if(!st.empty() && st.top() > abs(arr[i] )) break;
                // if stack is empty while removing elements because of above conditions[than push incoming ele]
                else if(st.empty()) ans.push_back(arr[i]);
                // if st.top() also moving towards left direction than and incoming element also moving
                // towards left direction and then both element will never collide and incoming element is
                // one of the possible answer
                else if(st.top() < 0) st.push(arr[i]);
            } 
        }

        int idx = ans.size(); //we need it ahead
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        //elements from stack will be in reverse order.
        //so we need to only reverse the elements coming from stack
        //that's why we kept a variable idx for elements not from stack
        reverse(ans.begin()+idx,ans.end());
        return ans;
    }
    vector<int> asteroidCollision(vector<int>& asteroids) {
        return findAsteroidCollision(asteroids);
    }
};








// Method - 2 Optimal - 2 Using stack Smaller Crisp code
class Solution {
public:
    // Method - 2 Optimal Using stack
    vector<int> findAsteroidCollision(vector<int> &arr) {
        stack<int> st;
        for(int i = 0 ; i < arr.size() ; i++) {
            // stack is empty than simply push element to stack
            // doesn't depend weather it is +ve or -ve 
            // incoming element moving towards right direction means +ve this will never cause an collision
            if(st.empty() || arr[i] > 0) st.push(arr[i]);
            // incoming element movind towargs left direction means -ve this may cause collision
            else{
                //size st.top is smaller than incoming element size[than pop top of stack smaller asteroid will X]
                while(!st.empty() && (st.top() > 0 && st.top() < abs(arr[i]) ) ) st.pop();
                // top size is equal to incoming element size [collision will occur and both elements will X]
                if(!st.empty() &&  st.top() == abs(arr[i]) ) st.pop();
                // //size st.top is greater than incoming element size[than st.top wins and incoming element will X] 
                // // so no further things are required as winner is already present inside stack
                // else if(!st.empty() && st.top() > abs(arr[i] )) break;
                // if stack is empty while removing elements because of above conditions[than push incoming ele]
                else{
                    if(st.empty() || st.top() < 0) {
                        st.push(arr[i]);
                    }
                }
            } 
        }
        vector<int> ans(st.size());
        for(int i = st.size() - 1 ; i >= 0 ; i--){
            ans[i] = st.top();
            st.pop();
        }
        return ans;
    }
    vector<int> asteroidCollision(vector<int>& asteroids) {
        return findAsteroidCollision(asteroids);
    }
};
