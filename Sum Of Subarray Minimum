// Method - 1 Brute Force TC: O(N^2)   SC : O(1)
class Solution {
public:
    // Method - 1 Brute Force TC: O(N^2)   SC : O(1)
    int findSumOfSubarrayMins(vector<int> &arr) {
        int mod= (1e9+7);
        long output = 0;
        for(int i = 0 ; i < arr.size() ; i++) {
            long minVal = arr[i];
            for(int j = i ; j < arr.size() ; j++) {
                if(arr[j] < minVal) minVal = arr[j];
                output += minVal;
            } 
        }
        return output % mod;
    }
    int sumSubarrayMins(vector<int>& arr) {
        return findSumOfSubarrayMins(arr);
    }
};






// Method - 2 Optimal TC: O(N + N + N) = O(3N)  SC :O(3N) 
class Solution {
     // Method - 2 Optimal TC: O(N + N + N) = O(3N)  SC :O(3N) 
public:
    vector<int> countNoOfSmallerElementLeft(vector<int> &arr){
        int n = arr.size();
        vector<int> ans(n);
        stack<int> st;
        for(int i = 0 ; i < n ; i++){
            while(!st.empty() && arr[st.top()] >= arr[i]){
                st.pop();
            }
            // this condition will count no of elements in left
            ans[i] = st.empty() ? i+1 : i - st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> countNoOfSmallerElementRight(vector<int> &arr) {
        int n = arr.size();
        vector<int> ans(n);
        stack<int> st;
        for(int i = n-1 ; i >= 0 ; i--){
            while(!st.empty() && arr[st.top()] > arr[i]){
                st.pop();
            }
            // this condition will count no of elements in right
            ans[i] = st.empty() ? n - i : st.top() - i;
            st.push(i);
        }
        return ans;
    }
    int findSumOfSubarrayMins(vector<int> &arr) {
        vector<int> left = countNoOfSmallerElementLeft(arr);
        vector<int> right = countNoOfSmallerElementRight(arr);

        long long result = 0;
        long long mod = (1e9+7);
        for(int i = 0 ; i < arr.size() ; i++){
            result = (result % mod+((arr[i]%mod*left[i]%mod)%mod*right[i]%mod)%mod)%mod;
        }
        return (int)result;
    }
    int sumSubarrayMins(vector<int>& arr) {
        return findSumOfSubarrayMins(arr);
    }
};




// Method - 3 Using stack  but with different counting techniques 
// Method - 3 Optimal TC: O(N + N + N) = O(3N)  SC :O(3N) 
class Solution {
     // Method - 3 Optimal TC: O(N + N + N) = O(3N)  SC :O(3N) 
public:
    vector<int> countNoOfSmallerElementLeft(vector<int> &arr){
        int n = arr.size();
        vector<int> ans(n);
        stack<int> st;
        for(int i = 0 ; i < n ; i++){
            int count = 1;
            while(!st.empty() && arr[st.top()] >= arr[i]){
                count += ans[st.top()];
                st.pop();
            }
            // this condition will count no of elements in left
            ans[i] = count;
            st.push(i);
        }
        return ans;
    }
    vector<int> countNoOfSmallerElementRight(vector<int> &arr) {
        int n = arr.size();
        vector<int> ans(n);
        stack<int> st;
        for(int i = n-1 ; i >= 0 ; i--){
            int count = 1;
            while(!st.empty() && arr[st.top()] > arr[i]){
                count += ans[st.top()];
                st.pop();
            }
            // this condition will count no of elements in right
            ans[i] = count;
            st.push(i);
        }
        return ans;
    }
    int findSumOfSubarrayMins(vector<int> &arr) {
        vector<int> left = countNoOfSmallerElementLeft(arr);
        vector<int> right = countNoOfSmallerElementRight(arr);

        long long result = 0;
        long long mod = (1e9+7);
        for(int i = 0 ; i < arr.size() ; i++){
            result = (result + (long long) arr[i] * left[i] * right[i]) % mod;
        }
        return (int)result;
    }
    int sumSubarrayMins(vector<int>& arr) {
        return findSumOfSubarrayMins(arr);
    }
};
